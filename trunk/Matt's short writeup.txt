The parts I added to the project were pretty widely scattered. I created the level map generator (which is randomized at each runtime), implemented invisibility (the actual adding and subtracting of alpha from the lion texture), got functional jab and throw functions for the spear working, helped set up the group fear influence effect, helped with spear orientation problems, fixed bits and pieces of lion code when they broke from time to time, and did a fair amount of general debugging.

Invisibility had a few issues in implementation. At first, the Lion would sometimes stay invisible for a while after leaving a bush. I soon discovered that the lion's "hide" state could transition to multiple states and these transitions didn't all ensure that the lion would become visible again. Obviously, all the debugging and fixing had problems. In the case of the spear, all that was needed was some basic trigonometry. Group influence also required a lot of tweaking, but Stewart added a handy drawable Circle class which provided us with a sort of makeshift debug mode for value-tweaking.

Profiling the game gave some pretty understandable results. Out of all the bytes allocated for running the game, 32.7% of them were dedicated to our Entity class. Since practically everything in the game extends Entity, it's not unexpected. The fact that the algorithms the Lion (it uses one check) and the deer (they use three) all run in N-squared time also accounts for the extra space taken up. We could have optimized this a bit more, but at the time, we had no idea what we were doing in terms of group influence and since we keep the deer count relatively low, the game speed isn't really affected.